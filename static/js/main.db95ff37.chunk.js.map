{"version":3,"sources":["components/search_bar/search_bar.jsx","components/post/post_index.jsx","actions/post_actions.js","util/reddit_api_util.js","components/post/post_index_container.js","reducers/selectors.js","App.js","root.jsx","reducers/post_reducer.js","reducers/root_reducer.js","store/store.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","subreddit","handleSubmit","bind","assertThisInitialized","field","_this2","event","setState","defineProperty","target","value","e","_this3","preventDefault","title","clearPosts","updateIsLoaded","requestPosts","then","createArray","updateTitle","react_default","a","createElement","className","concat","viewNsfw","onClick","handleNSFW","onSubmit","placeholder","type","autoFocus","onChange","update","Component","masonryOptions","transitionDuration","PostIndex","afterString","isLoaded","array","handleClick","localStorage","hasOwnProperty","hydrateStateWithLocalStorage","length","JSON","parse","getItem","handleAfter","posts","window","addEventListener","saveState","removeEventListener","key","setItem","stringify","data","name","map","post","url","includes","thumbnail","open","dataset","link","idx","postTitle","slice","parent_whitelist_status","undefined","href","rel","handleReddit","data-link","permalink","src","alt","index","indexOf","gfyurl","scrolling","frameBorder","allow","allowFullScreen","videourl","autoPlay","muted","loop","replace","height","width","frameborder","allowfullscreen","imgrurl","scrapeImgur","string","imgurUrl","laidoutitems","setTimeout","forEach","img","element","_this4","_this5","search_bar","lib_default","elementType","options","onLayoutComplete","laidOutItems","handleLayoutComplete","renderPosts","postCount","limit","dispatch","arguments","$","ajax","method","dataType","APIUtil","children","connect","keys","id","App","Route","exact","path","component","PostIndexContainer","Root","_ref","store","es","HashRouter","src_App_0","PostReducer","action","freeze","dup","assign","dupLength","merge","rootReducer","combineReducers","middlewares","thunk","configureStore","preloadedstate","createStore","applyMiddleware","apply","Boolean","location","hostname","match","document","getState","root","getElementById","ReactDOM","render","src_root","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db95ff37.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      subreddit: \"\"\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  update(field) {\n    return event => this.setState({[field]: event.target.value});\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const title = this.state.subreddit ? this.state.subreddit : 'all'\n    this.props.clearPosts();\n    this.props.updateIsLoaded();\n    this.props.requestPosts(\"\",0,title)\n      .then(() => this.props.createArray())\n      .then(() => this.props.updateTitle(title))\n      .then(() => this.props.updateIsLoaded())\n  }\n\n  render() {\n    return(\n      <div className=\"header\">\n        <button className={`load_button ${this.props.viewNsfw ? \"red_button\" : \"\"}`} onClick={this.props.handleNSFW} >{this.props.viewNsfw ? \"nsfw on\" : \"nsfw off\"}</button>\n        <form onSubmit={this.handleSubmit}>\n          <input placeholder=\"Subreddit\" type=\"text\" autoFocus=\"autofocus\" value={this.state.subreddit} onChange={this.update('subreddit')}></input>\n          <input className=\"load_button\" type=\"submit\" value=\"Search\"></input>\n        </form>\n        {`r/${this.props.title}`}\n      </div>\n    )\n  }\n};\n\nexport default SearchBar;\n","import React, {Component} from 'react';\nimport Masonry from 'react-masonry-component';\nimport SearchBar from '../search_bar/search_bar';\n\nconst masonryOptions = {\n    transitionDuration: 0\n};\n\nclass PostIndex extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      afterString: \"\",\n      viewNsfw: false,\n      title: \"all\",\n      isLoaded: false,\n      array: []\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleNSFW = this.handleNSFW.bind(this);\n    this.updateTitle = this.updateTitle.bind(this);\n    this.updateIsLoaded = this.updateIsLoaded.bind(this);\n    this.createArray = this.createArray.bind(this);\n  }\n\n  componentDidMount() {\n    if(localStorage.hasOwnProperty('array')) {\n      this.hydrateStateWithLocalStorage();\n      let length = JSON.parse(localStorage.getItem('array')).length;\n      let title = JSON.parse(localStorage.getItem('title'));\n      this.props.requestPosts(\"\", \"\", title, length)\n        .then(() => this.createArray())\n        .then(() => this.setState({isLoaded: true}))\n        .then(() => this.handleAfter())\n    } else {\n      this.props.requestPosts(this.state.afterString, this.props.posts.length, this.state.title)\n      .then(() => this.createArray())\n      .then(() => this.setState({isLoaded: true}))\n      .then(() => this.handleAfter())\n    }\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveState.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveState.bind(this)\n    );\n    this.saveState();\n  }\n\n  saveState() {\n    for(let key in this.state) {\n      if (key === 'isLoaded') {\n        localStorage.setItem(key, false)\n      } else {\n        localStorage.setItem(key, JSON.stringify(this.state[key]));\n      }\n    }\n  }\n\n  hydrateStateWithLocalStorage() {\n    for(let key in this.state) {\n      if (localStorage.hasOwnProperty(key)) {\n        let value = localStorage.getItem(key);\n        try {\n          value = JSON.parse(value);\n          this.setState({ [key]: value });\n        } catch (e) {\n          this.setState({ [key]: value });\n        }\n      }\n    }\n  }\n\n  updateTitle(title) {\n    this.setState({ title: title});\n  }\n\n  updateIsLoaded() {\n    if(this.state.isLoaded) {\n      this.setState({ isLoaded: false });\n    } else {\n      this.setState({ isLoaded: true });\n    }\n  }\n\n  handleAfter () {\n    this.setState({afterString: this.props.posts[this.props.posts.length-1].data.name});\n  }\n\n  createArray() {\n    let array = this.props.posts.map((post) => {\n      if (post.data.url.includes('png') || post.data.url.includes('jpg') || post.data.url.includes('gif') || post.data.url.includes('gfycat') || post.data.url.includes('youtube')) {\n        return post.data.url;\n      } else {\n        return post.data.thumbnail;\n      }\n    });\n      this.setState({array: array});\n  }\n\n  handleReddit(e) {\n    e.preventDefault();\n    window.open(e.target.dataset.link, '_blank');\n  }\n\n  renderPosts () {\n    let posts = this.state.array.map((post,idx) => {\n      let postTitle = this.props.posts[idx].data.title;\n      if(postTitle.length > 50) {\n        postTitle = postTitle.slice(0, 50).concat('...')\n      }\n      if (!this.state.viewNsfw) {\n        if (this.props.posts[idx]) {\n          if (this.props.posts[idx].data.parent_whitelist_status) {\n            if (this.props.posts[idx].data.parent_whitelist_status.includes('nsfw')) {\n              return;\n            }\n          }\n        }\n      }\n      if (post === undefined) {\n        return;\n      } else if(post.includes('png') || post.includes('jpg')) {\n        return(\n          <li className=\"image deactive\" key={idx}>\n            <a href={this.props.posts[idx].data.url} target=\"_blank\" rel=\"noopener noreferrer\">\n              <div className=\"image_overlay\">\n                <div className=\"title_hover\" onClick={this.handleReddit.bind(this)} data-link={`https://reddit.com${this.props.posts[idx].data.permalink}`}>\n                  {postTitle}\n                </div>\n              </div>\n              <img src={post} alt={post.title}></img>\n            </a>\n          </li>\n        );\n      } else if (post.includes('gfycat')) {\n        let index;\n        if (post.includes('detail/')) {\n          index = post.indexOf('detail/') + 7;\n        } else {\n          index = post.indexOf('.com/') + 5;\n        }\n        let gfyurl = \"https://gfycat.com/ifr/\" + post.slice(index);\n          return(\n            <li className=\"image deactive\" key={idx}>\n              <a href={this.props.posts[idx].data.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <div className=\"image_overlay\">\n                  <div className=\"title_hover\" onClick={this.handleReddit.bind(this)} data-link={`https://reddit.com${this.props.posts[idx].data.permalink}`}>\n                    {postTitle}\n                  </div>\n                </div>\n                <iframe className=\"gfycat\" src={gfyurl} scrolling=\"no\" frameBorder=\"0\" allow=\"autoplay; fullscreen\" allowFullScreen={true}></iframe>\n              </a>\n            </li>\n          );\n        } else if (post.includes('gif')){\n        if (post[post.length-1] === 'v') {\n          let index = post.indexOf('.gifv');\n          let videourl = post.slice(0, index) + \".mp4\";\n          return(\n            <li className=\"image deactive\" key={idx}>\n              <a href={this.props.posts[idx].data.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <div className=\"image_overlay\">\n                  <div className=\"title_hover\" onClick={this.handleReddit.bind(this)} data-link={`https://reddit.com${this.props.posts[idx].data.permalink}`}>\n                    {postTitle}\n                  </div>\n                </div>\n                <video autoPlay muted loop src={videourl}></video>\n              </a>\n            </li>\n          );\n        } else {\n          return(\n            <li className=\"image deactive\" key={idx}>\n              <a href={this.props.posts[idx].data.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <div className=\"image_overlay\">\n                  <div className=\"title_hover\" onClick={this.handleReddit.bind(this)} data-link={`https://reddit.com${this.props.posts[idx].data.permalink}`}>\n                    {postTitle}\n                  </div>\n                </div>\n                <img src={post} alt={post.title}></img>\n              </a>\n            </li>\n          );\n        }\n      } else if (post.includes('youtube')){\n        let url = this.props.posts[idx].data.url.replace('watch?v=', 'embed/')\n        return(\n          <li className=\"ytvideo\" key={idx}>\n            <a href={this.props.posts[idx].data.url} target=\"_blank\" rel=\"noopener noreferrer\">\n              <div className=\"image_overlay\">\n                <div className=\"title_hover\" onClick={this.handleReddit.bind(this)} data-link={`https://reddit.com${this.props.posts[idx].data.permalink}`}>\n                  {postTitle}\n                </div>\n              </div>\n              <iframe height=\"300\" width=\"500px\" src={url} frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n            </a>\n          </li>\n        )\n\n      } else if (post.includes('imgur')) {\n        let imgrurl = post;\n        this.props.scrapeImgur(imgrurl)\n          .then(() => {\n            let string = this.props.imgurUrl;\n            let index = string.indexOf('i.imgur');\n            let url = string.slice(index);\n        return(\n          <li className=\"image deactive\" key={idx}>\n            <a href={this.props.posts[idx].data.url} target=\"_blank\" rel=\"noopener noreferrer\">\n              <div className=\"image_overlay\">\n                <div className=\"title_hover\" onClick={this.handleReddit.bind(this)} data-link={`https://reddit.com${this.props.posts[idx].data.permalink}`}>\n                  {postTitle}\n                </div>\n              </div>\n              <img src={url} alt={post.title}></img>\n            </a>\n          </li>\n        );\n      });\n      }else {\n        return;\n      }\n    });\n    return posts;\n  }\n\n  handleLayoutComplete(laidoutitems) {\n    setTimeout(() => laidoutitems.forEach(img => {\n      img.element.className = \"image active\";\n    }), 2500);\n  }\n\n  handleNSFW (e) {\n    e.preventDefault();\n    if (this.state.viewNsfw) {\n      this.setState({viewNsfw: false});\n    } else {\n      this.setState({viewNsfw: true});\n    }\n  }\n\n  handleClick (e) {\n    e.preventDefault();\n    this.props.requestPosts(this.state.afterString, this.props.posts.length, this.state.title)\n      .then(() => this.handleAfter())\n      .then(() => this.createArray());\n  }\n\n  render() {\n    const {isLoaded} = this.state;\n    if(!isLoaded) {\n      return (<div>Loading...</div>)\n    } else {\n      return(\n        <div>\n          <SearchBar title={this.state.title} viewNsfw={this.state.viewNsfw} handleNSFW={this.handleNSFW} createArray={this.createArray} updateIsLoaded={this.updateIsLoaded} requestPosts={this.props.requestPosts} clearPosts={this.props.clearPosts} updateTitle={this.updateTitle}/>\n          <br/>\n          <Masonry\n            className={'my-gallery-class'}\n            elementType={'ul'}\n            options={masonryOptions}\n            onLayoutComplete={laidOutItems => this.handleLayoutComplete(laidOutItems)}\n            >\n            {this.renderPosts()}\n          </Masonry>\n          <div className=\"load-button\">\n            <button className=\"load_button\" onClick={this.handleClick}>Load More</button>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default PostIndex;\n","import * as APIUtil from '../util/reddit_api_util';\n\nexport const RECEIVE_POSTS = \"RECEIVE_POSTS\";\nexport const CLEAR_POSTS = \"CLEAR_POSTS\";\nexport const RECEIVE_HTML = \"RECEIVE_HTML\";\n\nexport const receivePosts = object => ({\n  type: RECEIVE_POSTS,\n  posts: object.data.children\n});\n\nexport const clearPosts = () => ({\n  type: CLEAR_POSTS,\n});\n\nexport const receiveHtml = (imageUrl) => ({\n  type: RECEIVE_HTML,\n  imageUrl\n});\n\nexport const requestPosts = (afterString, postCount, subreddit, limit) => dispatch => (\n  APIUtil.requestPosts(afterString, postCount, subreddit, limit)\n    .then(posts => dispatch(receivePosts(posts)))\n);\n","import $ from 'jquery';\n\nexport const requestPosts = (afterString = \"\", postCount = \"\", subreddit = \"all\", limit = 25) => (\n  $.ajax({\n    method: 'GET',\n    url: `https://www.reddit.com/r/${subreddit}.json?limit=${limit}&after=${afterString}&count=${postCount}`,\n    dataType: \"json\"\n  })\n);\n","import { connect } from 'react-redux';\nimport PostIndex from './post_index';\nimport { requestPosts, clearPosts } from '../../actions/post_actions';\nimport { selectAllPosts } from '../../reducers/selectors';\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: selectAllPosts(state.posts),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  requestPosts: (afterString, postCount, subreddit, limit) => dispatch(requestPosts(afterString, postCount, subreddit, limit)),\n  clearPosts: () => dispatch(clearPosts()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PostIndex);\n","export const selectAllPosts = (posts) => {\n  let arr = Object.keys(posts).map((id) => (posts[id]));\n  return arr;\n};\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\n// import logo from './logo.svg';\nimport './App.css';\nimport PostIndexContainer from './components/post/post_index_container';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Route exact path='/' component={PostIndexContainer} />\n        <footer></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nconst Root = ({store}) => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nexport default Root;\n","import { RECEIVE_POSTS, CLEAR_POSTS} from '../actions/post_actions';\nimport merge from 'lodash/merge';\n\nconst PostReducer = (state = {}, action) => {\n  Object.freeze(state);\n  switch(action.type) {\n    case RECEIVE_POSTS:\n      let dup = Object.assign({}, state);\n      let dupLength = Object.keys(dup).length;\n      action.posts.forEach((post, idx) => {\n        dup[dupLength+idx+1] = post;\n      });\n      return merge({}, dup);\n    case CLEAR_POSTS:\n      return {};\n    default:\n      return state;\n  }\n};\n\nexport default PostReducer;\n","import {combineReducers} from 'redux';\nimport PostReducer from './post_reducer';\n\nconst rootReducer = combineReducers({\n  posts: PostReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/root_reducer';\n\nconst middlewares = [thunk];\n\nif (process.env.NODE_ENV !== 'production') {\n  middlewares.push(logger);\n}\n\nconst configureStore = (preloadedstate = {}) => (\n  createStore(rootReducer, preloadedstate, applyMiddleware(...middlewares))\n);\n\nexport default configureStore;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './root';\nimport configureStore from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let store = configureStore();\n\n  window.getState = store.getState;\n  window.dispatch = store.dispatch;\n\n  const root = document.getElementById('root');\n  ReactDOM.render(<Root store={store}></Root>, root);\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}